group = "com.example.my_rfid_plugin"
version = "1.0-SNAPSHOT"

buildscript {
    ext.kotlin_version = "1.9.22"
    repositories {
        google()
        mavenCentral()
        
    }

    dependencies {
        //classpath("com.android.tools.build:gradle:7.3.0")
        classpath("com.android.tools.build:gradle:8.5.0")
        
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        
    }
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

android {
    if (project.android.hasProperty("namespace")) {
        namespace = "com.example.my_rfid_plugin"
    }

    compileSdk = 34

    // compileOptions {
    //     sourceCompatibility = JavaVersion.VERSION_1_8
    //     targetCompatibility = JavaVersion.VERSION_1_8
    // }

    // kotlinOptions {
    //     jvmTarget = "1.8"
    // }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    // ⬇︎ Kotlin JVM 17
    kotlinOptions {
        jvmTarget = "17"
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }

    defaultConfig {
        minSdk = 21
    }

    dependencies {
        testImplementation("org.jetbrains.kotlin:kotlin-test")
        testImplementation("org.mockito:mockito-core:5.0.0")
        implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
        implementation 'io.reactivex.rxjava2:rxjava:2.2.19'
        
        //Write için eklendi
        implementation "com.google.code.gson:gson:2.8.8"
        
        //////////////////////////
        implementation project(":libs")
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}
